odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
#load ODBC library
library(RODBC)
odbcDataSources()
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
require(Rserve)
Rserve()
Rserve()
install.packages(c("boot", "gtools", "manipulate"))
head(train)
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC);require(ROCR)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
setwd('Google Drive/KDD2015')
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
# load('data/new/cv_data_anscombe_extend.RData')
# load('data/new/cv_data_extend.RData')
source('KDD2015/Main/0_function.R')
# load('data/new/raw_data_log_extend.RData')
################
### training ###
################
train_df <- train[,-which(names(train) %in% c('course_id', 'enrollment_id', 'username'))]
val_df <- val[,-which(names(val) %in% c('course_id', 'enrollment_id', 'username'))]
test_df <- test[,-which(names(test) %in% c('course_id', 'enrollment_id', 'username'))]
set.seed(8)
train_df <- shuffle(train_df)
######################
### convert target ###
######################
train_df$dropout <- as.factor(train_df$dropout)
levels(train_df$dropout) <- c('No','Yes')
RocImp <- filterVarImp(x = train_df[, -55], y = train_df$dropout)
RocImp[order(RocImp[,1],decreasing = T),]
head(train_df)
names(train_df)
fitControl <- trainControl(method = "none", #number = 10, repeats = 5,
classProbs = TRUE, summaryFunction = twoClassSummary)#,
#adaptive = list(min = 8,alpha = 0.05,
#method = "BT",complete = TRUE))
gbmGrid <-  expand.grid(interaction.depth=8,n.trees=60,shrinkage=0.1,n.minobsinnode=1)#
model <- 'gbm'
gbmFit <- train(dropout ~ ., data = train_df[,c(36,55)], method = model, #[,c('dropout',varImp)]
trControl = fitControl, preProc = c("center", "scale"),
metric = "ROC",verbose =T,tuneGrid = gbmGrid )#tuneLength = 6,
pred <- predict(gbmFit, newdata = val_df, type = "prob")
target_val = val_df$dropout
score <- auc(pred, target_val);print(score)
RocImp[order(RocImp[,1],decreasing = T),]
gbmFit <- train(dropout ~ ., data = train_df[,c(3,55)], method = model, #[,c('dropout',varImp)]
trControl = fitControl, preProc = c("center", "scale"),
metric = "ROC",verbose =T,tuneGrid = gbmGrid )#tuneLength = 6,
pred <- predict(gbmFit, newdata = val_df, type = "prob")
# pred <- predict(gbmFit, newdata = val_df)
# levels(pred) <- c(0,1); pred <- as.matrix(pred)
# pred <- as.numeric(pred);pred <- cbind(pred,pred)
##################
### Validation ###
##################
target_val = val_df$dropout
score <- auc(pred, target_val);print(score)
setwd('/Users/ivanliu/Google Drive/ANZ/Multivariate Time Series/R/')
require(data.table)
dt <- fread('../Auto Sector - Data Set v1.4.xlsx', data.table=F)
dt <- fread('../Auto_Sector', data.table=F)
dt <- fread('../Auto_Sector.csv', data.table=F)
dim(dt)
head(dt)
dt2 <- ts(dt, start = c(1994,3), freq=12)
head(dt2)
dt2 <- ts(dt, start = c(1994,3), freq=12)
head(dt)
dt <- dt[,-which(names(dt) %in% c('Date'))]
require(vars)
dt2 <- ts(dt, start = c(1994,3), freq=12)
head(dt2)
class(dt2)
plot.ts(dt2)
plot(dt2, type='single', lty=1:3)
plot(dt2[,1:3], type='single', lty=1:3)
plot(dt2[,2:4], type='single', lty=1:3)
plot(dt2[,2:4], plot.type='single', lty=1:3)
plot(dt2, plot.type='single', lty=1:3)
dim(dt2)
head(dt2)
library(tseries)
plot(dt2, plot.type='single', lty=1:29)
library(vars)
VAR(dt2, p=2, type='both')
head(dt2)
names(dt2)
colnamesnames(dt2)
colnames(dt2)
VAR(dt2, p=19, type='both')
dt2[,19]
dt2[,20]
dt2[,21]
dt2[,22]
dt2[,23]
dt2[,24]
dt2[,25]
VAR(dt2, p=25, type='both')
VAR(dt2, p=25, type='both')
?VAR
VAR(dt2[,25], p=25, type='both')
dt2[,26]
VAR(dt2[,25:26], p=25, type='both')
z=VAR(dt2[,25:26], p=25, type='both')
zp=predict(z,n.ahead =12,ci = 0.95)
plot(zp)
dt2[25:26]
dt2[,25:26]
plot(zp)
zp
z
library(dse)
install.packages(dse)
install.packages('dse')
library(dse)
dt2
SOI<- TSdata(input= dt2[,1:25],output= w[,26])
SOI<- TSdata(input= dt2[,1:25],output= dt2[,26])
SOI
SOI <-tframed(SOI,list(start=c(1994,3), freq=12))
SOI
seriesNamesinput(SOI) < - c ("NO", "TI")
SOI
seriesNamesinput(SOI) < - colnames(dt2[,1:25])
seriesNamesInput(SOI) < - colnames(dt2[,1:25])
seriesNamesInput(SOI) <- colnames(dt2[,1:25])
seriesNamesOutput(SOI) <- colnames(dt2[,26])
SOI
SOI.ls<-stVARXls(SOI,max.lag=2)##
SOI.ls<-estVARXls(SOI,max.lag=2)##
print(SOI.ls)
stability(SOI.ls)
rr=checkResiduals(SOI.ls)
par(mfrow=c(1 ,2)) ;acf (rr$re ) ;pacf (r r $re)
par(mfrow=c(1,2)) ;acf(rr$re) ;pacf(rr$re)
rr=checkResiduals(SOI.ls)
rr
stability(SOI.ls)
SOI.ls<-estVARXls(window(SOI,end=c(2014,12)),max.lag=2)##
SOI.ls
stability(SOI.ls)
S.p = forecast(SOI.ls, conditioning.inputs = SOI$input)
colnames(dt2)
z=VAR(dt2[,25:26], p=25, type='both')
zp=predict(z,n.ahead =12,ci = 0.95)
plot(zp)
z
zp=predict(z,n.ahead =24,ci = 0.95)
plot(zp)
zp=predict(z,n.ahead =36,ci = 0.95)
plot(zp)
zp=predict(z,n.ahead =136,ci = 0.95)
plot(zp)
zp=predict(z,n.ahead =12,ci = 0.95)
plot(zp)
print(SOI.ls)
stability(SOI.ls)
S.p = forecast(SOI.ls, conditioning.inputs = SOI$input)
library(vars)
colnames(dt2)
z=VAR(dt2[,25:26], p=25, type='both')
zp=predict(z,n.ahead =12,ci = 0.95)
plot(zp)
head(dt)
z=VAR(dt2[,25:26], p=2, type='both')
zp=predict(z,n.ahead =12,ci = 0.95)
plot(zp)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=50, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
dim(dt2)
z=VAR(dt2[,25:26], p=29, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=250, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=200, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=100, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=50, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=80, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=50, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=20, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=30, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=40, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=60, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
?VAR
z=VAR(dt2[,25:26], p=10, type='both',season=12)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=10, type='both')
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
?VAR
z=VAR(dt2[,25:26], p=2, type='both',season=12, lag.max=2, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
?VAR
z=VAR(dt2[,25:26], p=5, type='both',season=12, lag.max=2, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=5, type='both',season=12, lag.max=10, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=15, type='both',season=12, lag.max=10, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=15, type='both',season=12, lag.max=50, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=50, type='both',season=12, lag.max=50, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=15, type='both',season=12, lag.max=10, exogen=NULL)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=15, type='both',season=12, lag.max=10)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=15, type='both',season=12)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=15, type='both',season=12, lag.max=15)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=15, type='both',season=12, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
?VAR
z=VAR(dt2[,25:26], p=15, type='both',season=12, lag.max=NULL, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=50, type='both',season=12, lag.max=NULL, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=12, type='both',season=12, lag.max=NULL, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =112,ci = 0.95)
plot(zp)
z=VAR(dt2[,25:26], p=12, type='both',season=12, lag.max=NULL, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =12,ci = 0.95)
plot(zp)
z
library(vars)
colnames(dt2)
z=VAR(dt2, p=12, type='both',season=12, lag.max=NULL, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =12,ci = 0.95)
plot(zp)
z=VAR(dt2[,19], p=12, type='both',season=12, lag.max=NULL, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =12,ci = 0.95)
plot(zp)
z=VAR(dt2[,25], p=12, type='both',season=12, lag.max=NULL, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =12,ci = 0.95)
plot(zp)
library(dse)
SOI<- TSdata(input= dt2[,1:25],output= dt2[,26])
SOI <-tframed(SOI,list(start=c(1994,3), freq=12))
seriesNamesInput(SOI) <- colnames(dt2[,1:25])
seriesNamesOutput(SOI) <- colnames(dt2[,26])
SOI.ls<-estVARXls(window(SOI,end=c(2014,12)),max.lag=2)##
print(SOI.ls)
stability(SOI.ls)
tfplot(S.p)
S.p = forecast(SOI.ls, conditioning.inputs = SOI$input)
S.p$forecast
tfplot(S.p)
SOI
data(WWWusage)
WWWusage
fit <- auto.arima(WWWusage)
require(forecast)
fit <- auto.arima(WWWusage)
plot(forecast(fit,h=20))
fit
fit <- auto.arima(dt[,19])
fit
plot(forecast(fit,h=20))
dt[,19]
fit <- auto.arima(dt2[,19])
plot(forecast(fit,h=20))
dt2[,19]
fit <- auto.arima(dt2[,19], seasonal=T)
plot(forecast(fit,h=20))
plot(forecast(fit,h=100))
fit <- auto.arima(dt2[,19], seasonal=T, start.p=12)
plot(forecast(fit,h=100))
fit <- auto.arima(dt2[,19], seasonal=T, d=12, D=12)
plot(forecast(fit,h=100))
fit <- auto.arima(dt2[,19], seasonal=T, D=12)
fit <- auto.arima(dt2[,19], seasonal=T, D=1)
fit <- auto.arima(dt2[,19], seasonal=T)
plot(forecast(fit,h=100))
fit <- auto.arima(dt2[,19], seasonal=T, max.p = 12)
plot(forecast(fit,h=100))
na.interp(dt2, lambda = NULL)
dt2
head(dt2)
na.interp(dt2[,1], lambda = NULL)
dt2[,1]
ncol(dt2)
dt3 <- dt2
for (i in 1:ncol(dt3)){
dt3[,i] <- na.interp(dt3[,i], lambda = NULL)
}
dt3
head(dt3)
fit <- auto.arima(dt2[,19], seasonal=T, max.p = 12)
fit
head(dt3)
fit <- auto.arima(dt2[,19], seasonal=T, max.p = 12)
plot(forecast(fit,h=100))
z=VAR(dt3[,25], p=12, type='both',season=12, lag.max=NULL, ic='AIC', exogen=NULL)
z=VAR(dt3, p=12, type='both',season=12, lag.max=NULL, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =12,ci = 0.95)
plot(zp)
zp
z=VAR(dt3[,19:20], p=12, type='both',season=12, lag.max=NULL, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =12,ci = 0.95)
plot(zp)
zp
zp=predict(z,n.ahead =120,ci = 0.95)
plot(zp)
head(dt3)
z=VAR(dt3[,19:20], p=12, type='both',season=12, lag.max=NULL, ic='AIC', exogen=NULL)
zp=predict(z,n.ahead =12,ci = 0.95)
plot(zp)
?na.interp
head(dt3)
colnames(dt3)
lm(x=dt3[,c(1:18,20:29)],y=dt3[,19])
lm(x=dt3[,c(1:18,20:29)],y=dt3[,19])
names(dt3[,c(1:18,20:29)])
colnames(dt3[,c(1:18,20:29)])
lm(x=colnames(dt3[,c(1:18,20:29)]),y=colnames(dt3[,19]),data=dt3)
lm(x=dt3[,c(1:18,20:29)],y=dt3[,19],data=dt3)
?lm
lm(dt3[,c(1:18,20:29)]~dt3[,19],data=dt3)
lm(dt3[,19]~dt3[,c(1:18,20:29)],data=dt3)
fit <- lm(dt3[,19]~dt3[,c(1:18,20:29)],data=dt3)
fit
summary(fit)
dit3[,19]
dt3[,19]
pred(fit, dt3)
predict(fit, dt3)
plot(dt3[,19])
plot(dt3[,19])
dt3[,19]
plot(dt3, plot.type='single', lty=1)
plot(dt3, plot.type='single', lty=1)
head(dt3)
head(dt3[m1])
head(dt3[,1])
dt3[,1]
dt <- fread('../Auto_Sector.csv', data.table=F)
dt2 <- ts(dt, start = c(1994,3), freq=12)
dt3 <- dt
for (i in 2:ncol(dt3)){ # impute null value
dt3[,i] <- na.interp(dt3[,i], lambda = NULL)
}
dt3
head(dt3)
write.csv(dt3, file='../Auto_Sector_comp.csv', row.names=F, quote=F)
install.packages(“Rserve”)
install.packages("Rserve")
library(Rserve)
Rserve()
?Rserve
