if(platform == "win")
{
c <- odbcDriverConnect(connection=paste0("server=",host,
";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC')
{
writeLines("Successfilly opened connection to db")
return(c)
}
else
{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac")
{
c <- odbcDriverConnect(connection=paste0("server=",host,
";database=",db,
";uid=",user,
";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC')
{
writeLines("Successfilly opened connection to db")
return(c)
}
else
{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost:1433', db='comtrade_source', user='sa', pass='Servian1', platform="win")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="win")
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win")
{
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server Native Client 11.0};TDS_Version=7.0;"))
if(class(c) == 'RODBC')
{
writeLines("Successfilly opened connection to db")
return(c)
}
else
{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac")
{
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC')
{
writeLines("Successfilly opened connection to db")
return(c)
}
else
{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="win")
cn <- odbcDriverConnect(connection="server=localhost;database=comtrade_source;
trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;")
library(RODBC)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="win")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server Native Client 10.0};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="win")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
install.packages('RODBC')
install.packages("RODBC")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
library(RODBC)
odbcDataSources()
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
odbcDriverConnect()
odbcDataSources()
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
#load ODBC library
library(RODBC)
odbcDataSources()
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
require(Rserve)
Rserve()
Rserve()
install.packages(c("boot", "gtools", "manipulate"))
head(train)
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC);require(ROCR)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
install.packages("manipulate")
setwd('/Users/ivanliu/Google Drive/ANZ/Multivariate Time Series/Auto_v1.4/R')
rm(list=ls());gc()
require(data.table);require(forecast);require(caret);require(bit64);library(vars)
dt <- fread('../data/Auto_Sector_Growth.csv', data.table=F, na.strings = '')
### Convert Data ###
timeLine <- dt[,'Date']
dt[,1] <- NULL;dt <- dt[,c(1:18,20:29,19)]
rawNames <- colnames(dt);newNames <- c(paste0('Var_', 1:(ncol(dt)-1)), 'Target')
nullRate <- apply(dt,2, function(x) mean(is.na(x)))
featMapping <- cbind(rawNames, newNames, nullRate)
colnames(dt) <- newNames
### Pre-processing ###
freq <- 12
dt <- ts(dt, freq=freq, start = c(1994,4))
for(i in 1:ncol(dt)){
dt[which(dt[,i]==0),i] <- NA
dt[,i] <- na.interp(dt[,i], lambda = NULL)
}
finFeatList <- featMapping[which(featMapping[,2] %in% colnames(dt)),][,1]
### VAR Modeling ###
# dt <- diff(dt, 1)
period = 24
irf_mt <- matrix(nrow = 28, ncol = 6)
for(i in 1:28){
fit_select <- VARselect(dt[,c(i,29)], lag.max=12, type='both');fit_select$selection
fit <- VAR(dt[,c(i,29)], p=floor(mean(fit_select$selection)), type='both', season=NULL, ic=c("AIC", "HQ", "SC", "FPE"))
cause <- causality(fit, cause = colnames(dt[,c(i,29)])[1]) #Var_1 do not Granger-cause Target
irf_mt[i,1] <- colnames(dt[,c(i,29)])[2]; irf_mt[i,2] <- colnames(dt[,c(i,29)])[1]
irf_mt[i,3] <- cause$Granger$p.value; irf_mt[i,4] <- cause$Instant$p.value
cause <- causality(fit, cause = colnames(dt[,c(i,29)])[2]) #Target do not Granger-cause Var_1
irf_mt[i,5] <- cause$Granger$p.value; irf_mt[i,6] <- cause$Instant$p.value
irf_fit <- irf(fit, n.ahead=24, ortho=T, cumulative=F, boot=T, ci=.95, runs=100, seed=8)
jpeg(paste0('image/Impulse_Response/',gsub("[^[:alnum:]]", "", finFeatList[i]),'irf.jpg'),width=600, height=400)
plot(irf_fit)
dev.off()
}
period = 24
irf_mt <- matrix(nrow = 28, ncol = 6)
for(i in 1:28){
fit_select <- VARselect(dt[,c(i,29)], lag.max=12, type='both');fit_select$selection
fit <- VAR(dt[,c(i,29)], p=floor(mean(fit_select$selection)), type='both', season=NULL, ic=c("AIC", "HQ", "SC", "FPE"))
cause <- causality(fit, cause = colnames(dt[,c(i,29)])[1]) #Var_1 do not Granger-cause Target
irf_mt[i,1] <- colnames(dt[,c(i,29)])[2]; irf_mt[i,2] <- colnames(dt[,c(i,29)])[1]
irf_mt[i,3] <- cause$Granger$p.value; irf_mt[i,4] <- cause$Instant$p.value
cause <- causality(fit, cause = colnames(dt[,c(i,29)])[2]) #Target do not Granger-cause Var_1
irf_mt[i,5] <- cause$Granger$p.value; irf_mt[i,6] <- cause$Instant$p.value
irf_fit <- irf(fit, n.ahead=24, ortho=T, cumulative=F, boot=T, ci=.95, runs=100, seed=8)
jpeg(paste0('../Image/Impulse_Response/',gsub("[^[:alnum:]]", "", finFeatList[i]),'irf.jpg'),width=600, height=400)
plot(irf_fit)
dev.off()
}
irf_mt
irf_mt
colnames(irf_mt) <- c('Var1', 'Var2', 'Granger_V2', 'Instant_V2', 'Granger_V1', 'Instant_V1')
irf_mt
write.csv(irf_mt, '../IRF_Outcomes.csv', row.names=F)
featMapping
i!=j
j=1
i!=j
plot(irf_fit)
plot(irf_fit)
dev.off()
plot(irf_fit)
par()
par(mfcol=c(2,1))
plot(irf_fit)
par(mfcol=c(1,2))
plot(irf_fit)
par(new=T)
plot(irf_fit)
plot(irf_fit)
par(new=F)
plot(irf_fit)
par(new=F, mfcol=c(1,2))
plot(irf_fit)
par(new=F, mfrow=c(1,2))
plot(irf_fit)
plot(irf_fit,plot.type='Multiple')
plot(irf_fit,plot.type='multiple')
plot(irf_fit,plot.type='multiple')
plot(irf_fit,plot.type='single')
plot(irf_fit,plot.type='single')
plot(irf_fit,plot.type='multiple')
plot(irf_fit,plot.type='single')
par(mfcol=c(2,2)
)
plot(irf_fit,plot.type='single')
plot(irf_fit, plot.type='single')
par(mfcol=c(1,4))
plot(irf_fit, plot.type='single')
par(mfcol=c(4,1))
plot(irf_fit, plot.type='single')
par(mfcol=c(2,2))
plot(irf_fit, plot.type='single')
29 * 29
29 * 29-29
period = 24
irf_mt <- matrix(nrow = 812, ncol = 6)
for(j in 1:29){
for(i in 1:29){
if(i!=j){
fit_select <- VARselect(dt[,c(i,j)], lag.max=12, type='both');fit_select$selection
fit <- VAR(dt[,c(i,j)], p=floor(mean(fit_select$selection)), type='both', season=NULL, ic=c("AIC", "HQ", "SC", "FPE"))
cause <- causality(fit, cause = colnames(dt[,c(i,j)])[1]) #Var_1 do not Granger-cause Target
irf_mt[i,1] <- colnames(dt[,c(i,j)])[2]; irf_mt[i,2] <- colnames(dt[,c(i,j)])[1]
irf_mt[i,3] <- cause$Granger$p.value; irf_mt[i,4] <- cause$Instant$p.value
cause <- causality(fit, cause = colnames(dt[,c(i,j)])[2]) #Target do not Granger-cause Var_1
irf_mt[i,5] <- cause$Granger$p.value; irf_mt[i,6] <- cause$Instant$p.value
irf_fit <- irf(fit, n.ahead=24, ortho=T, cumulative=F, boot=T, ci=.95, runs=100, seed=8)
jpeg(paste0('../Image/Impulse_Response/',gsub("[^[:alnum:]]", "", finFeatList[j]),'_to_',gsub("[^[:alnum:]]", "", finFeatList[i]),'.jpg'),width=600, height=400)
par(mfcol=c(2,2))
plot(irf_fit, plot.type='single')
dev.off()
}
}
}
irf_mt
head(irf_mt)
tail(irf_mt)
z <- 1
period = 24
irf_mt <- matrix(nrow = 812, ncol = 6)
z <- 1
for(j in 1:29){
for(i in 1:29){
if(i!=j){
fit_select <- VARselect(dt[,c(i,j)], lag.max=12, type='both');fit_select$selection
fit <- VAR(dt[,c(i,j)], p=floor(mean(fit_select$selection)), type='both', season=NULL, ic=c("AIC", "HQ", "SC", "FPE"))
cause <- causality(fit, cause = colnames(dt[,c(i,j)])[1]) #Var_1 do not Granger-cause Target
irf_mt[z,1] <- colnames(dt[,c(i,j)])[2]; irf_mt[z,2] <- colnames(dt[,c(i,j)])[1]
irf_mt[z,3] <- cause$Granger$p.value; irf_mt[z,4] <- cause$Instant$p.value
cause <- causality(fit, cause = colnames(dt[,c(i,j)])[2]) #Target do not Granger-cause Var_1
irf_mt[z,5] <- cause$Granger$p.value; irf_mt[z,6] <- cause$Instant$p.value
irf_fit <- irf(fit, n.ahead=24, ortho=F, cumulative=F, boot=T, ci=.95, runs=100, seed=8)
jpeg(paste0('../Image/Impulse_Response/',gsub("[^[:alnum:]]", "", finFeatList[j]),'_to_',gsub("[^[:alnum:]]", "", finFeatList[i]),'.jpg'),width=600, height=400)
par(mfcol=c(2,2))
plot(irf_fit, plot.type='single')
dev.off()
z <- z+1
}
}
}
irf_mt
colnames(irf_mt) <- c('Var1', 'Var2', 'Granger_V2', 'Instant_V2', 'Granger_V1', 'Instant_V1')
write.csv(irf_mt, '../IRF_Outcomes.csv', row.names=F)
irf_mt
head(irf_mt)
